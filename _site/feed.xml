<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-10-31T13:59:37-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Gecko05 Blog</title><subtitle>Here you will find blog entries about personal projects ranging from low level programming to simple games.</subtitle><entry><title type="html">Gauss Synth - Puzzle game in Pico8</title><link href="http://localhost:4000/2020/03/31/gauss-synth.html" rel="alternate" type="text/html" title="Gauss Synth - Puzzle game in Pico8" /><published>2020-03-31T00:00:00-06:00</published><updated>2020-03-31T00:00:00-06:00</updated><id>http://localhost:4000/2020/03/31/gauss-synth</id><content type="html" xml:base="http://localhost:4000/2020/03/31/gauss-synth.html">&lt;iframe src=&quot;https://www.lexaloffle.com/bbs/widget.php?pid=gaussynth&quot; allowfullscreen=&quot;&quot; width=&quot;621&quot; height=&quot;513&quot; style=&quot;border:none; overflow:hidden&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;This is a simple puzzle game made in Pico8. Inspired by Gauss Jordan elimination. 
My objective was to reflect the “intuitive” feeling of solving systems of equations using the GJ elimination method in a simpler and more fun way. I’m not sure how fun it is though, to be honest I don’t feel the desire to play it much.&lt;/p&gt;

&lt;p&gt;Controls:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Pressing Z will change the colors of the selected row.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pressing right, will allow you to swap the selected row into another position.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pressing left, will duplicate the selected row to allow you merging it with another row. You can press Z to change the colors of the duplicated row as well.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Jaime Centeno</name></author><summary type="html"></summary></entry><entry><title type="html">Poland’s cozy cold</title><link href="http://localhost:4000/2020/02/15/cozy-cold-Poland.html" rel="alternate" type="text/html" title="Poland’s cozy cold" /><published>2020-02-15T00:00:00-06:00</published><updated>2020-02-15T00:00:00-06:00</updated><id>http://localhost:4000/2020/02/15/cozy-cold-Poland</id><content type="html" xml:base="http://localhost:4000/2020/02/15/cozy-cold-Poland.html">&lt;div style=&quot;text-align: justify&quot;&gt; 
&lt;p&gt;
The things I felt when I made my first international trip was excitement, loneliness and cold.
&lt;/p&gt;&lt;p&gt;
Last December I made my first trip ever to a new country: Poland. This was also my first time taking a flight and my first time taking vacations after I started working for the industry. You might thinkg it wasn't the best idea to go on winter vacations alone to such a cold place, let alone if you come from a warm place like Mexico (Although winter can be pretty cold here as well). And it might be true, from a &quot;comfortable&quot; perspective, it would have been a better idea to go to a sunny place like the beach, or maybe a more touristic location. Instead I decided to go alone to the city of Poznan, capital of the Greater Poland.&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ratusz.jpeg&quot; alt=&quot;SSD1351&quot; class=&quot;img-responsive&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-poland&quot;&gt;Why Poland?&lt;/h2&gt;
&lt;div style=&quot;text-align: justify&quot;&gt; &lt;p&gt;
This is the first question I got from almost every Pole I've talked with: &quot;Why Poland?&quot;. This broke my heart a bit, as I felt Poles were implying that their country is neither a beautiful nor an interesting place to visit compared to the rest of the world. Of course this is not true, and although many Poles love their country, to my perception, it's bit of a hidden place in terms of tourism.&lt;/p&gt; &lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/colorPoznan.jpeg&quot; alt=&quot;SSD1351&quot; class=&quot;img-responsive&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: justify&quot;&gt; &lt;p&gt;
As a nerd, my first interest in Poland sparked since I started playing The Witcher games. I was amazed at how different the first game felt compared to your average fantasy roleplaying-game. Sure it's still some kind of Tolkien-ish fantasy, however, the monsters, the story, and the whole mood of the game felt like a breath of fresh air. I had to discover where did this come from.&lt;/p&gt;

&lt;p&gt;After getting to know how was the game developed, and a bit about the history of Poland, I became engaged to getting to know this place even better. I started planning on visiting this country on my first vacations, which would be around holidays so I could stay ther as long as I could without quitting my job or something. It took me a year of waiting, a time during I started learning the language. Although the words in Polish can look intimidating; like &quot;chrząszcz&quot;, it's a rather easy language to pronounce for someone from Mexico, since most of the consonats have equivalent sounds in spanish. After almost a year of self study and some months aided by a Polish teacher, I was able to make simple and slow conversations, nothing too fancy, but something that would help me get out of trouble.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/witcher.jpeg&quot; alt=&quot;SSD1351&quot; class=&quot;img-responsive&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: justify&quot;&gt; 

&lt;p&gt;If I were to repeat this trip with my current level of Polish language, I would feel more afraid than I felt before. In my imagination I overestimated my Polish proficiency, thinking that I would be able to understand every single word that came out from native speakers or people on the streets.&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;getting-to-know-the-winter&quot;&gt;Getting to know the winter&lt;/h2&gt;
&lt;div style=&quot;text-align: justify&quot;&gt; 

&lt;p&gt;As someone from a tropical birthplace, I had never really experienced a typical movie-like winter season, the ones where the trees die, the clouds are always covering the sun, and the cold can kill you if you don't wear the appropiate clothes.&lt;/p&gt;

&lt;p&gt;So, after almost 20 hours of traveling, I finally arrived to Poland. The first time I heard polish I felt happy, as if I was at home. I had been hearing people talking in german for about 18 hours, and I don't know german at all. However, as I started hearing this first polish conversation, some kind of fear also started growing on me since I only understood around 20% of what people were saying. I instantly knew I could have some trouble using a service, asking for food, or just trying to chat with Poles. &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/walk.jpeg&quot; alt=&quot;SSD1351&quot; class=&quot;img-responsive&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;div style=&quot;text-align: justify&quot;&gt; 
&lt;p&gt;When I arrived to Poznan airport, I saw this grey cold winter weather I've never seen before. It was something exciting, yet also daunting. Everything was new to me, and I felt like I was a child who got lost. Also, the airport was lonely, and a bit dark since not all the lights were turned on. No familiar faces, no native languages, everyone was tall and white. So then a concerning thought crossed my mind: &quot;Where the heck did I come to?&quot;.&lt;/p&gt;

&lt;p&gt;I could have been more comfortable going to almost anywhere in Mexico, and even more comfortable if I just stayed at home playing games from my bed all day long. I knew I wasn't going to feel comfortable, but I wasn't sure what to expect either.&lt;/p&gt;

&lt;p&gt;So then I went and stayed at a hostel, expecting to make new friends who would share with me a lot of interesting stories about how they travel around the world and what they like about Poland. Yeah, I was wrong. For the most part I stayed alone in a bedroom for six people. The first night was so cold, and I had no idea how warmers worked so I didn't bother to turn them on (Yeah, I can be that stupid). That first night I met an Ukrainian guy, and we talked for a while. He was on his way to Ukraine to visit his family for New Year's Eve.&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/zamek.jpeg&quot; alt=&quot;SSD1351&quot; class=&quot;img-responsive&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;div style=&quot;text-align: justify&quot;&gt; 

&lt;p&gt;The next day, jetlag hit me pretty hard and amplified my anxiety, I didn't have the energy to get up from bed and start walking around the city. The sun set around 4pm and it was too cold outside, so I felt like sleeping a lot the first three days of my vacations. Also I had this weird feeling about being &quot;no one&quot; outside of Mexico, as if my enviroment dictated who I am.&lt;/p&gt;

&lt;p&gt;At the hostel, I also met a Peruvian guy that just moved from Spain to Poland and enjoyed to spend his free nights at Poznan, and an old Polish man who tried to flirt with me, LOL.&lt;/p&gt;

&lt;p&gt;Then I moved out of the hostel and stayed at an hotel for the rest of my vacations. On the way to the hotel I felt a bit misserable, I felt like I was wasting my vacations, in the same fashion as I felt about wasting my free time in Mexico. I was pretty much on bed all day long, going out to get to know the old town just ocassionally. I missed my family, my friends and being in a place where I would have no trouble communicating. &lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;i-was-carrying-the-sunny-weather-with-me-all-the-time&quot;&gt;I was carrying the sunny weather with me all the time&lt;/h2&gt;

&lt;div style=&quot;text-align: justify&quot;&gt; 
&lt;p&gt;At the hotel I got used to the schedule change and things started to look brighter for me. This time the breakfast was nice, I felt more privacy, practiced talking Polish with people, and I got to know the city better. I also met a guy from Mexico who was also on vacations, he was visiting his sister who already lived in Poland. This helped me a lot since we went out to eat some delicious pierogi, meet a Polish friend of his, and I got to talk plenty of Spanish. Also, in the next days I would meet for the first time with my best Polish friend with whom I had been talking for almost a year now. This is the time when my anxiety levels started to drop and something clicked on my head; I'm just the same old me, and maybe even a more interesting and well-rested version of me in Poland. Wherever I get to go, I don't depend on my surroundings to define who I am.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/churchWow.jpeg&quot; alt=&quot;SSD1351&quot; class=&quot;img-responsive&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align: justify&quot;&gt; 

&lt;p&gt;During my stay I got to know even more of the city, like several plazas, some parks, churches, a lovely neighborhood next to an island surrounded by two rivers. All of this would eventually lead to me getting used to Poznan and having the best time I've had in almost two years or so. I must say Poznan is a beautiful city, so much different than Mexico, and I kind of fell in love with it even if I was in such a grey season. Poznan has big old buildings full of history, wide roadwalks, bycicle roads, a lot of trees, great parks, two beautiful wide rivers, amazing churches, and way more things to discover that I didn't get to know.&lt;/p&gt;

&lt;p&gt;The people is also nice and hospitable, although from a western perspective they're often described as cold, which is unfair since they're still gentle people and really warm as anyone else once you get to know them better. As an introvert, this was no problem for me, however, I can understand how extroverts would need a bit more of excitement from social interactions.&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/island.jpeg&quot; alt=&quot;SSD1351&quot; class=&quot;img-responsive&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;div style=&quot;text-align: justify&quot;&gt; 
&lt;p&gt;I was starting to feel at home, and sadly I had to go back to Mexico soon. I said goodbye and came back to my dear country after almost 15 days of vacations. Neither my back, nor my neck hurted, I had rested well and I kind of forgot how stressed and anxious I would feel on a daily basis. After all, even if I had a bit of a hard time on winter, I miss Poland, and I threaten to go back and get to know the rest of the cities I couldn't visit like Cracow, Wroclaw, Zakopane and Warsaw. Poland has something special that feels really personal to me. However, I think I would go back on a sunnier weather to be able to stay longer on the outside and see all the beautiful natural landscapes Poland has to offer.&lt;/p&gt;

&lt;p&gt;I do recommend visiting Poland, especially when it's not winter. However, I need to advice you to get to know a bit of the language before going. Athough most people talk english very well, some others don't, especially if it's the older generation. Also, if it's your first time travelling, be prepared to experience some new feelings, both good and bad. But remember that at the end everything will be Ok, as humans, we can adapt to social change and eventually grow from it.&lt;/p&gt;
&lt;/div&gt;</content><author><name>Jaime Centeno</name></author><summary type="html">The things I felt when I made my first international trip was excitement, loneliness and cold. Last December I made my first trip ever to a new country: Poland. This was also my first time taking a flight and my first time taking vacations after I started working for the industry. You might thinkg it wasn't the best idea to go on winter vacations alone to such a cold place, let alone if you come from a warm place like Mexico (Although winter can be pretty cold here as well). And it might be true, from a &quot;comfortable&quot; perspective, it would have been a better idea to go to a sunny place like the beach, or maybe a more touristic location. Instead I decided to go alone to the city of Poznan, capital of the Greater Poland.</summary></entry><entry><title type="html">Embedding sprites with the aid of Python</title><link href="http://localhost:4000/2019/09/29/sprite-support.html" rel="alternate" type="text/html" title="Embedding sprites with the aid of Python" /><published>2019-09-29T00:00:00-05:00</published><updated>2019-09-29T00:00:00-05:00</updated><id>http://localhost:4000/2019/09/29/sprite-support</id><content type="html" xml:base="http://localhost:4000/2019/09/29/sprite-support.html">&lt;p&gt;After finishing and adding support for my &lt;a href=&quot;https://github.com/Gecko05/SSD1351-Driver-Library&quot;&gt;OLED display library&lt;/a&gt; I decided to move on to the gaming section. This time I would embed sprite support into the library and a way to import sprites into the MCU flash memory, since it can be really tedious to write “by hand” all of the sprites.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gifs/zero.gif&quot; alt=&quot;Zero&quot; class=&quot;img-responsive&quot; width=&quot;600px&quot; caption=&quot;A megaman X animation&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-a-sprite&quot;&gt;Using a sprite&lt;/h2&gt;

&lt;p&gt;Well, I don’t quite have the perfect answer for what a sprite is, but I would define a sprite as a 2D image we use as a resource to draw each key frame of every animation and visual effect we’ll see on a screen. With sprites we create an animation, our characters, environment, effects, etc. Basically everything that is visible in a 2D game. Sprites come quite handy to use when working with pixel games, it’s easy to draw them, there are plenty of tools to use and they just look pretty.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/spritePixel.jpg&quot; alt=&quot;Sprite sprite&quot; class=&quot;img-responsive&quot; width=&quot;150px&quot; caption=&quot;Sprite sprite&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After reading a bit about image formats I’ve decided to use the &lt;a href=&quot;https://en.wikipedia.org/wiki/BMP_file_format&quot;&gt;.bmp format&lt;/a&gt; to handle sprites, it’s not an optimized format, but it makes image handling way more easy than if we used a compressed format like .png or .jpg.&lt;/p&gt;

&lt;h2 id=&quot;saving-up-space-for-the-sprite&quot;&gt;Saving up space for the sprite&lt;/h2&gt;

&lt;p&gt;Sprites and all kind of images are composed of three basic colors: red, green and blue. Image storage is a challenge, since saving up all three values of these three basic colors for each pixel of your screen could take a heavy amount of memory.&lt;/p&gt;

&lt;p&gt;Let’s say we have a sprite of 128x128 and each pixel has information about the three basic colors with a resolution of 5 bits for red and blue, and 6 bits for green; this means that each pixel would take 16 bits of memory for storage. If we calculate the total amount of memory for this single sprite, we would end up with 128x128x16 bits of memory, which is approximately 262 KB and almost a quarter of the available Flash memory on device!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/Palette.png&quot; alt=&quot;Palette&quot; class=&quot;img-responsive&quot; width=&quot;400px&quot; caption=&quot;Color palette&quot; align=&quot;center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fortunately, bitmap images have a nice method for storing pixelated images and images with a small amount of colors(up to 256). This aproach consists on making a “palette array” of all the colors used for the image, for this palette we store the real RGB bit value for each palette color. With this palette, the image is just stored as an array of indexes, where each index has a match to a color in the palette array. So, instead of taking 16 bits per pixel, we just take 8 bits, or even less if we’re just using 16 colors(4 bits). This reduces the required storage per image to almost half of what we previously had!&lt;/p&gt;

&lt;h2 id=&quot;creating-a-sprite&quot;&gt;Creating a sprite&lt;/h2&gt;

&lt;p&gt;Now, before creating a sprite inside the SSD1351 library, we need a pixelated image as a reference. Be cautious with the size of the sprite while using this library, it’s not optimized yet so you could deplete the device’s memory. For future releases, a microSD will be used to store all the sprites in order to not take memory from the device.&lt;/p&gt;

&lt;p&gt;Inside the library, a “sprite” is a structure containing a pointer to the actual sprite image as an indexed bitmap, as well as some additional information like the sprite dimensions.
For each sprite an array of unsigned 8-bit integers has to be written, which is a ton of work susceptible for a ton of human errors, right?
This is where machines come in handy and make us dependent to them. A Python script called convertsprites.py will take up all the bitmap images(created with Aseprite) passed as arguments and magically convert them to the aforementioned sprites inside .c files while incredibly reducing the amount of sweat and tears one would spend translating all of these sprites.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/LoadingSprites.png&quot; alt=&quot;Loading a sprite&quot; class=&quot;img-responsive&quot; width=&quot;900px&quot; caption=&quot;Loading a sprite&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the sprites are inside the .c files, one must only compile the project using the library and use the sprites defined in loaded_sprites.c and call those beautiful sprites to be drawn on the screen with the SSD1351_draw_sprite function(It takes a sprite pointer as argument).&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s next?&lt;/h2&gt;

&lt;p&gt;As I mentioned before, for future releases I’ll include a MicroSD card to load all the sprites. Also my SSD1351 library will be used to create a simpler Lua embedded game development interface that allows to write games as if it were Pico8 and maybe someday complete an unofficial port(Although currently TIC80 seems more attractive).
As always feel free to fork and tweak this library, and if you do something with it please let me know, I would love to see it.&lt;/p&gt;</content><author><name>Jaime Centeno</name></author><summary type="html">After finishing and adding support for my OLED display library I decided to move on to the gaming section. This time I would embed sprite support into the library and a way to import sprites into the MCU flash memory, since it can be really tedious to write “by hand” all of the sprites.</summary></entry><entry><title type="html">Using an RGB display with embedded C</title><link href="http://localhost:4000/2019/06/23/rgb-library.html" rel="alternate" type="text/html" title="Using an RGB display with embedded C" /><published>2019-06-23T00:00:00-05:00</published><updated>2019-06-23T00:00:00-05:00</updated><id>http://localhost:4000/2019/06/23/rgb-library</id><content type="html" xml:base="http://localhost:4000/2019/06/23/rgb-library.html">&lt;p&gt;Two months ago I got a new 128x128 OLED Display to play with, this time it was the &lt;strong&gt;SSD1351&lt;/strong&gt;. This OLED display, although limited, supports RGB colors which has been very exciting as it’s my first time working with one of those. I got this display from &lt;a href=&quot;https://www.ebay.com/sch/i.html?_from=R40&amp;amp;_trksid=p2380057.m570.l1313.TR1.TRC0.A0.H0.Xssd1351.TRS0&amp;amp;_nkw=ssd1351&amp;amp;_sacat=0&quot;&gt;ebay&lt;/a&gt; for around $17, a relatively cheap price if we consider its potential.&lt;/p&gt;

&lt;p&gt;For this display I decided to create my own driver library, inspired by the library I used for the &lt;strong&gt;SSD1306&lt;/strong&gt; in the &lt;a href=&quot;https://gecko05.github.io/2019/02/09/nucleo-squashy-part1.html&quot;&gt;previous entry&lt;/a&gt;, with subtle support for printing and graphics display, like rectangles, circles and lines.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ssd1351_print.jpg&quot; alt=&quot;Printing demo&quot; class=&quot;img-responsive&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ll describe the basics of the development for this library for everyone curious about rudimentary graphics programming. I’m also using the same development board as before, the &lt;strong&gt;Nucleo L152RE&lt;/strong&gt; and &lt;strong&gt;SW4STM32&lt;/strong&gt; as the IDE, however, this library was adjusted to be of generic use in C regardless of the hardware you’re using. Some configuration is needed inside the &lt;em&gt;ssd1351.h&lt;/em&gt; header file though.&lt;/p&gt;

&lt;h1 id=&quot;relevant-hardware-information&quot;&gt;Relevant hardware information&lt;/h1&gt;

&lt;p&gt;As a low level programmer it’s important to look for the data-sheet and specifications of the devices we’re is programming for. So for prototyping, the relevant information we can get from the &lt;a href=&quot;https://www.newhavendisplay.com/app_notes/SSD1351.pdf&quot;&gt;data-sheet&lt;/a&gt; is the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SPI communication(3 or 4 wire)&lt;/li&gt;
  &lt;li&gt;2.4V – 3.5V Power supply&lt;/li&gt;
  &lt;li&gt;128x128x18 SRAM Display Buffer (more on this later)&lt;/li&gt;
  &lt;li&gt;262k color depth&lt;/li&gt;
  &lt;li&gt;Data/Command Pin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/ssd1351.jpg&quot; alt=&quot;SSD1351&quot; class=&quot;img-responsive&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;start-your-engines&quot;&gt;Start your engines&lt;/h1&gt;

&lt;p&gt;Personally speaking, initialization process is the toughest stage of the development of a driver library, especially if it’s the first time you’re working with the hardware. There’s a lot of information you need to extract from the data-sheet like configuration options, communication modes, working modes, timings, and initialization routines. It’s also the time to create your long list of command and constant definitions, hardware abstraction layer definitions, and more. On top of that, add the excitement of wanting to get your device running as soon as possible and see all that magical stuff you can do with it.&lt;/p&gt;

&lt;p&gt;Once the display turns on and it’s ready to receive data, it’s necessary to unlock the majority of the commands via a special command, then we’re ready to send all the configuration stuff we want to change from the original reset values.&lt;/p&gt;

&lt;h1 id=&quot;communication-is-key&quot;&gt;Communication is key&lt;/h1&gt;

&lt;p&gt;The way to tell the display what to do is based on commands and data transmission. For 3-Wire SPI we only need CS, MOSI and MISO pins as well as an extra pin called C/D to tell the display whether we’re sending a data byte or a command byte. To send a command, the C/D needs to be in logical low and to send data it needs to be in logical high.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gifs/ssd1351_fail.gif&quot; alt=&quot;Color modes&quot; class=&quot;img-responsive&quot; width=&quot;200px&quot; caption=&quot;Oops&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some commands are followed by one or more bytes of data, and some of them are not, everything is described on the data-sheet. For example, to send the starting and ending row numbers as 0 and 127, we first send the 75h command byte followed by 00h and 7Fh data bytes.
Inside the library, the communication has been abstracted under three “wrapper” functions that every user needs to link to their own HAL. One function is designed to send a command byte, another one to send a data byte and a third one to send a buffer of a specified length.&lt;/p&gt;

&lt;h1 id=&quot;the-display-ram&quot;&gt;The display RAM&lt;/h1&gt;

&lt;p&gt;The display RAM is the most interesting part of the display because it’s where the fun happens. This RAM works as a long array of bytes where each pixel has a total of 18 bits to store the intensity of each color(red, green and blue), so each color is represented by a value of 6 bits. Now, 18 bits is kind of a large number to handle, so to make things easier both in storage and communication, the display offers a variety of color modes. Each color mode has a specified data length to work with, the lower the length the less colors we can use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/color_modes.png&quot; alt=&quot;Color modes&quot; class=&quot;img-responsive&quot; width=&quot;750px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The best approach to make changes in the display is to perform all the color changes in a local RAM array inside the MCU and, when we’re ready, send the “Write RAM” command followed by all the bytes we’re using to change each pixel’s color. This way we avoid excessive and unnecessary writing to the SPI port which also reduces the time needed to perform complex drawings onto the screen.&lt;/p&gt;

&lt;p&gt;For the library I decided to use the lowest color depth available as it matches quite well the 8-bit SPI communication and it makes byte handling easier. This means we only have to use 5, 6 and 5 bytes for reed, green and blue colors respectively, adding to a total of 2 bytes per pixel. There’s already a function to perform the conversion from rgb values to a single integer of 16 bits.&lt;/p&gt;

&lt;h1 id=&quot;psychedelic-stuff&quot;&gt;Psychedelic stuff&lt;/h1&gt;

&lt;p&gt;With all these tools, we can start writing the fun graphics stuff that involves all the algorithms to draw lines, polygons, circles, and character printing. I gotta admit that other than the rectangles, I didn’t come to these algorithms by my own, there are already optimized algorithms to draw &lt;a href=&quot;https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm&quot;&gt;pixelated lines&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Midpoint_circle_algorithm&quot;&gt;circles&lt;/a&gt;. Currently there are functions to draw individual pixels, draw lines, rectangles, filled rectangles, circles, filled circles, and character printing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gifs/ssd1351_circles.gif&quot; alt=&quot;Circles demo&quot; class=&quot;img-responsive&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The character printing stuff is heavily based on Olivier van Ede’s “ssd1306-stm32HAL”, which is a library for a mono-chromatic OLED display that I used on my previous project. Basically all the fonts files stayed the same except for a few adjustments in readability and generic usage. The formatted printing is a limited feature, it only supports three data types: strings, characters and signed 8-bit integers, as well as the escape character ‘\n’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/gifs/ssd1351_lines.gif&quot; alt=&quot;Lines demo&quot; class=&quot;img-responsive&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;building-upon&quot;&gt;Building upon&lt;/h1&gt;

&lt;p&gt;The next step is going back to the Breakout-like game and develop a way to load sprites from a file system. Then maybe even extending to a graphics library to something more sophisticated as well as importing Lua scripts into a STM32 microcontroller to make simple games that use this library. You can find three demos listed in the main readme file of the repository. As always, if you’re curious then feel free to fork and test this library into your own favorite micro-controller.
&lt;a href=&quot;https://github.com/Gecko05/SSD1351-Driver-Library&quot;&gt;Repository here&lt;/a&gt;&lt;/p&gt;</content><author><name>Jaime Centeno</name></author><summary type="html">Two months ago I got a new 128x128 OLED Display to play with, this time it was the SSD1351. This OLED display, although limited, supports RGB colors which has been very exciting as it’s my first time working with one of those. I got this display from ebay for around $17, a relatively cheap price if we consider its potential.</summary></entry><entry><title type="html">PICO8-like Squashy game in a broken OLED Display</title><link href="http://localhost:4000/2019/02/09/nucleo-squashy-part1.html" rel="alternate" type="text/html" title="PICO8-like Squashy game in a broken OLED Display" /><published>2019-02-09T00:00:00-06:00</published><updated>2019-02-09T00:00:00-06:00</updated><id>http://localhost:4000/2019/02/09/nucleo-squashy-part1</id><content type="html" xml:base="http://localhost:4000/2019/02/09/nucleo-squashy-part1.html">&lt;p&gt;For the first entry of this page I’ll talk about the process of developing a simple Squashy game for one of my favorite ST Boards, the &lt;a href=&quot;https://www.st.com/en/evaluation-tools/nucleo-l152re.html&quot;&gt;Nucleo L152RE&lt;/a&gt;, using &lt;a href=&quot;https://www.freertos.org/&quot;&gt;FreeRTOS&lt;/a&gt;, C language programming and &lt;a href=&quot;https://www.st.com/en/development-tools/sw4stm32.html&quot;&gt;SW4STM32&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The inspiration for this project comes from the very first game example from the &lt;a href=&quot;https://sectordub.itch.io/pico-8-fanzine-1&quot;&gt;PICO-8 Zine  #1&lt;/a&gt; for the &lt;a href=&quot;https://www.lexaloffle.com/pico-8.php&quot;&gt;PICO8&lt;/a&gt; Lua based fantasy console. The first article of the zine guides you through the development of a simple Squashy game, which has pretty much the basic mechanics of a Breakout game.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/squashyPico.png&quot; alt=&quot;Squashy in PICO8&quot; class=&quot;img-responsive&quot; width=&quot;400px&quot; image-caption=&quot;Oops&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://www.lexaloffle.com/bbs/?cat=7&amp;amp;carts_tab=1#sub=2&amp;amp;mode=carts&amp;amp;search=squashy&quot;&gt;game&lt;/a&gt; is pretty straightforward, there’s a ball that bounces between the top, left and right edges of the screen, and a pad which you take control of. The sole objective is to keep bouncing the ball for as long as you can, every time the ball bounces you get +1 in your Score and if the ball touches the bottom of the screen you’ll lose a life.&lt;/p&gt;

&lt;div class=&quot;embed-container&quot;&gt;
  &lt;iframe src=&quot;https://www.youtube.com/embed/eNKy-4qQbHk&quot; width=&quot;500&quot; height=&quot;290&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;
  &lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;While my first objective was to develop a game for a Nucleo board, I intend to create something resembling a game engine for custom hardware that enables multiplayer options via Bluetooth between one or more console devices.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/expected.png&quot; alt=&quot;Expected result&quot; class=&quot;img-responsive&quot; width=&quot;400px&quot; caption=&quot;Squashy in PICO8&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;features&quot;&gt;Features&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Speed based controls&lt;/li&gt;
  &lt;li&gt;Can restart the game&lt;/li&gt;
  &lt;li&gt;Score&lt;/li&gt;
  &lt;li&gt;Lives system&lt;/li&gt;
  &lt;li&gt;Bounce beep&lt;/li&gt;
  &lt;li&gt;Bugs&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;whats-missing&quot;&gt;What’s missing&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Good OLED display&lt;/li&gt;
  &lt;li&gt;PWM notes for the buzzer&lt;/li&gt;
  &lt;li&gt;Restart position&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;hardware&quot;&gt;Hardware&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Nucleo L152RE&lt;/li&gt;
  &lt;li&gt;2 Pushbuttons&lt;/li&gt;
  &lt;li&gt;OLED screen SSD1306 with I2C&lt;/li&gt;
  &lt;li&gt;Piezo buzzer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/squashyNucleo.jpg&quot; alt=&quot;Hardware&quot; class=&quot;img-responsive&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For the hardware I’m simply using two push buttons, one piezoelectric buzzer and the cheap mono-color OLED Display SSD1306 which has a screen of 64x128 pixels. However, once I started testing stuff I noticed that my display might be broken because it doesn’t show display other row of pixels. This creates some issues because small sprites of around 6x6 won’t show properly and they might become illegible. Once I get my hands on a new RGB OLED Display I’ll update the project to use a limited palette of 16 colors like the old times.&lt;/p&gt;

&lt;p&gt;I didn’t develop the driver for my SSD1306 from scratch, instead I cloned this simple &lt;a href=&quot;https://github.com/4ilo/ssd1306-stm32HAL&quot;&gt;library&lt;/a&gt; from Olivier Van den Eede which already uses STM32 HAL and contains pretty much all the abstraction I needed to build upon.&lt;/p&gt;

&lt;h1 id=&quot;structure&quot;&gt;Structure&lt;/h1&gt;

&lt;p&gt;First of all, PICO8 games need three fundamental functions; Init, Update and Draw.
Init(), as its name implies, initializes stuff.
Update() is a function that runs continuously in which you execute all calculations related to movement, hits, score, etc.
Draw() is the function that paints all the stuff on the screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/picoBasic.png&quot; alt=&quot;Pico8 basic structure&quot; class=&quot;img-responsive&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/picoInNucleo.png&quot; alt=&quot;Picolike tasks&quot; class=&quot;img-responsive&quot; width=&quot;300px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first thing I needed was a system in which I could run both Update and Draw simultaneously, since it’s a more scalable approach than running one function before the other. So taking advantage of the CubeMX tool from STM32 I created a blank project with Middleware FreeRTOS enabled, which is a small Real Time Operating System that can be run on almost any 32-bit Microcontroller.&lt;/p&gt;

&lt;p&gt;As far as I know, any RTOS can work under the concept of preemptive tasks, which are basically looped functions that run “simultaneously”. For this project it means that every time fraction Draw() will do stuff then the program will swap to the Update() function and run for another time fraction, then swap back to Draw() and so on until the end of times(or until the MCU turns off) giving the illusion of running simultaneous tasks.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/preemption.jpg&quot; alt=&quot;Preemptive Tasks&quot; class=&quot;img-responsive&quot; width=&quot;400px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once I had the project ready I moved on to developing my three main functions. Init() was pretty straightforward, only needed to include initialization of variables, hardware, etc. While Draw() and Update() were independent tasks.&lt;/p&gt;

&lt;p&gt;The basic drawable game element is defined by the structure &lt;em&gt;BodyNode&lt;/em&gt;. &lt;em&gt;BodyNode&lt;/em&gt; contains pretty much all the necessary information to know where every object should be drawn, the details of the sprite it is using and a flag to know whether the program should hide the sprite or not.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/spriteHeart.png&quot; alt=&quot;Heart sprite in bits&quot; class=&quot;img-responsive&quot; width=&quot;200px&quot; /&gt;
&lt;img src=&quot;/assets/images/spriteHeartPico.png&quot; alt=&quot;Heart sprite intended&quot; class=&quot;img-responsive&quot; width=&quot;175&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;Sprite&lt;/em&gt; type is another structure that holds an array of 16bit unsigned integers(&lt;em&gt;spriteArray&lt;/em&gt;) with the monochromatic pixel information. If a pixel must be drawn then there’s a 1, if not, a 0. It also holds the width and height dimensions in pixels for the sprite so the function that draws every sprite knows how to iterate over the sprite array.&lt;/p&gt;

&lt;p&gt;Feel free to peek around, pretty much every 32bit Nucleo Board could run this game, just set up the peripherals using the STM32CubeMx Tool if you’re not using a L152RE.&lt;/p&gt;

&lt;p&gt;You can find the project’s repository &lt;a href=&quot;https://github.com/Gecko05/NucleoSquashy&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Jaime Centeno</name></author><summary type="html">For the first entry of this page I’ll talk about the process of developing a simple Squashy game for one of my favorite ST Boards, the Nucleo L152RE, using FreeRTOS, C language programming and SW4STM32.</summary></entry></feed>